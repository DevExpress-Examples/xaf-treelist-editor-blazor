@using DevExpress.Blazor.CustomComponents
@implements IDisposable
 
<TreeList @ref="TreeList" PropertyNames="@(new string[] { "Name" })"
          GetData="@GetData"
          GetKey="@GetKey"
          GetParentKey="@GetParentKey"
          HasChildren="@HasChildren"
          RowClick="@OnRowClick"
          SelectionChanged="@OnSelectionChanged">
</TreeList>

@code {
public static RenderFragment Create(TreeListViewModel componentModel) =>@<TreeListComponent ComponentModel=@componentModel />;
    [Parameter]
    public TreeListViewModel ComponentModel { get; set; }
    public override System.Threading.Tasks.Task SetParametersAsync(ParameterView parameters)
    {
        if (ComponentModel != null)
        {
            ComponentModel.Refreshed -= ComponentModel_Refreshed;
        }
        return base.SetParametersAsync(parameters);
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ComponentModel.Refreshed += ComponentModel_Refreshed;
    }

    void IDisposable.Dispose()
    {
        ComponentModel.Refreshed -= ComponentModel_Refreshed;
    }

    protected void ComponentModel_Refreshed(object sender, EventArgs e)
    {
        TreeList?.Refresh();
    }

    TreeList TreeList { get; set; }

    protected Task<IList> GetData(string parentKey)
    {
        IList data = ComponentModel.Data.Where(x => ((BaseObject)x).Oid == Guid.Parse(key));
        return System.Threading.Tasks.Task.FromResult(data);
    }
    protected string GetKey(object item)
    {
        return ((BaseObject)item).Oid.ToString();
    }
    protected string GetParentKey(object item)
    {
        return ((ITreeNode)item).Parent == null ? null : ((BaseObject)((ITreeNode)item).Parent).Oid.ToString();
    }
    protected bool HasChildren(object item)
    {
        return ((ITreeNode)item).Children?.Count > 0;
    }
    protected void OnRowClick(string key)
    {
        var item = ComponentModel.Data.Where(x => ((BaseObject)x).Oid == Guid.Parse(key)).FirstOrDefault();
        ComponentModel.OnRowClick(item);
    }
    protected void OnSelectionChanged(string[] keys)
    {
        var items = ComponentModel.Data.Where(x => keys.Contains(((BaseObject)x).Oid.ToString())).ToArray();
        ComponentModel.OnSelectionChanged(items);
    }
    }
