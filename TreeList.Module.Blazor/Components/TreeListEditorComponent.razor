@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject IServiceProvider ServiceProvider
@typeparam T
<div id=@Id></div>

@code {
    public TreeListEditorComponent()
    {
        Id = "treeList-container-" + Guid.NewGuid().ToString();
    }
    [Parameter]
    public TreeListEditorModel<T> ComponentModel { get; set; }
    public static RenderFragment Create(TreeListEditorModel<T> componentModel) => @<TreeListEditorComponent ComponentModel=@componentModel />;
    public async Task Refresh()
    {
        await JSRuntime.InvokeVoidAsync("TreeListEditorComponent.Refresh", Id);
    }
    string Id { get; }
    protected override Task OnInitializedAsync()
    {
        ComponentModel.TreeList = this;
        return base.OnInitializedAsync();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("TreeListEditorComponent.Init", Id, ComponentModel.KeyFieldName, ComponentModel.RootValue, ComponentModel.FieldNames, DotNetObjectReference.Create(this));
    }
    [JSInvokable]
    public Task<JsonDocument> GetData(string parentId)
    {
        return Task.FromResult(GetJsonData(GetObjectsByParentKeys(parentId)));
    }
    private object GetObjectsByParentKeys(string parentId)
    {
        var os = GetObjectSpace();
        if (!string.IsNullOrEmpty(parentId))
        {
            var objectType = ComponentModel.RootValueType != null ? ComponentModel.RootValueType : typeof(T);
            var key = os.GetObjectKey(objectType, parentId);
            var parentObject = os.GetObjectByKey(objectType, key);
            return parentObject != null ? ((ITreeNode)parentObject).Children : null;
        }
        else
        {
            return os.GetObjects<T>(CriteriaOperator.Parse("[Parent] is null"));
        }
    }
    private IObjectSpace GetObjectSpace()
    {
        var appProvider = (IXafApplicationProvider)ServiceProvider.GetService(typeof(IXafApplicationProvider));
        var app = appProvider.GetApplication();
        return app.CreateObjectSpace(typeof(ITreeNode));
    }
    private JsonDocument GetJsonData(object data)
    {
        var jsonSerializerOptions = new JsonSerializerOptions();
        jsonSerializerOptions.MaxDepth = 64;
        jsonSerializerOptions.Converters.Add(new PersistentBaseConverterFactory(ServiceProvider));
        return JsonDocument.Parse(JsonSerializer.Serialize(data, jsonSerializerOptions));
    }
    [JSInvokable]
    public Task RowClick(JsonElement key)
    {
        switch (key.ValueKind)
        {
            case JsonValueKind.String:
                if (key.TryGetGuid(out var result))
                {
                    ComponentModel.RowClick(result);
                }
                else
                {
                    ComponentModel.RowClick(key.GetString());
                }
                break;
        }
        return Task.CompletedTask;
    }
    [JSInvokable]
    public Task SelectionChanged(JsonElement keys)
    {
        var result = new List<object>();
        if (keys.ValueKind == JsonValueKind.Array)
        {
            var keysEnumerator = keys.EnumerateArray();
            foreach (JsonElement item in keysEnumerator)
            {
                switch (item.ValueKind)
                {
                    case JsonValueKind.String:
                        if (item.TryGetGuid(out var key))
                        {
                            result.Add(key);
                        }
                        else
                        {
                            result.Add(item.GetString());
                        }
                        break;
                }
            }
        }
        ComponentModel.SelectionChanged(result);
        return Task.CompletedTask;
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("TreeListEditorComponent.Dispose", Id);
    }
    }
